<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Yash Lala</title><link>https://yashlala.com/</link><description>Recent content on Yash Lala</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>yash.lala@yale.edu (Yash Lala)</managingEditor><webMaster>yash.lala@yale.edu (Yash Lala)</webMaster><copyright>Â© Yash Lala</copyright><lastBuildDate>Fri, 24 May 2024 17:49:06 -0700</lastBuildDate><atom:link href="https://yashlala.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Anki flashcards for the GRE Vocab Section</title><link>https://yashlala.com/blog/2024/gre-materials/</link><pubDate>Fri, 24 May 2024 17:49:06 -0700</pubDate><author>yash.lala@yale.edu (Yash Lala)</author><guid>https://yashlala.com/blog/2024/gre-materials/</guid><description>&lt;p&gt;Back when I was applying for grad school, I found a great
&lt;a href="https://apps.ankiweb.net/"&gt;Anki&lt;/a&gt; deck for the GRE Vocabulary section online.
It&amp;rsquo;s quite complete, and includes memorable pictures for tricky words.&lt;/p&gt;
&lt;p&gt;Most of the deck is copied from online. I just made some fixes, replaced some
pictures, and added new words as I encountered them on practice tests.&lt;/p&gt;
&lt;p&gt;You can download the deck &lt;a href="gre-vocab-anki.apkg"&gt;here&lt;/a&gt;.
Maybe you&amp;rsquo;ll find it useful.&lt;/p&gt;</description><content:encoded><![CDATA[<p>Back when I was applying for grad school, I found a great
<a href="https://apps.ankiweb.net/">Anki</a> deck for the GRE Vocabulary section online.
It&rsquo;s quite complete, and includes memorable pictures for tricky words.</p>
<p>Most of the deck is copied from online. I just made some fixes, replaced some
pictures, and added new words as I encountered them on practice tests.</p>
<p>You can download the deck <a href="gre-vocab-anki.apkg">here</a>.
Maybe you&rsquo;ll find it useful.</p>
]]></content:encoded></item><item><title>Connecting to the Yale VPN from Linux</title><link>https://yashlala.com/blog/2024/yale-vpn-linux/</link><pubDate>Mon, 12 Feb 2024 17:49:06 -0700</pubDate><author>yash.lala@yale.edu (Yash Lala)</author><guid>https://yashlala.com/blog/2024/yale-vpn-linux/</guid><description>&lt;p&gt;In Fall 2023, Yale made some changes to its VPN login system.
Instead of asking you for your username and password, the VPN client now
directs you to a web-based authentication page.&lt;/p&gt;
&lt;p&gt;This causes some trouble when logging in with &lt;code&gt;openconnect&lt;/code&gt;. Reaching out to
Yale IT doesn&amp;rsquo;t help here &amp;ndash; they only support Cisco&amp;rsquo;s first-party AnyConnect
client on Windows/Mac.&lt;/p&gt;
&lt;p&gt;But there&amp;rsquo;s a workaround. Just tell &lt;code&gt;openconnect&lt;/code&gt; to pretend it&amp;rsquo;s a Cisco
client:&lt;/p&gt;</description><content:encoded><![CDATA[<p>In Fall 2023, Yale made some changes to its VPN login system.
Instead of asking you for your username and password, the VPN client now
directs you to a web-based authentication page.</p>
<p>This causes some trouble when logging in with <code>openconnect</code>. Reaching out to
Yale IT doesn&rsquo;t help here &ndash; they only support Cisco&rsquo;s first-party AnyConnect
client on Windows/Mac.</p>
<p>But there&rsquo;s a workaround. Just tell <code>openconnect</code> to pretend it&rsquo;s a Cisco
client:</p>






<pre tabindex="0"><code>openconnect --useragent=AnyConnect access.yale.edu</code></pre>
<p>And the VPN will start right up.</p>
<hr>
<p>EDIT: Some readers have had difficulties with the setup process. I&rsquo;ll add
two tips here, so you won&rsquo;t run into the same issues.</p>
<p>Firstly: Your browser will need access to the <code>DISPLAY</code> or <code>WAYLAND_DISPLAY</code>
variables to open a window. <code>sudo</code> won&rsquo;t pass environment variables to
<code>openconnect</code> by default &ndash; so use something like <code>sudo -E openconnect</code>
instead.</p>
<p>Secondly: Running <code>openconnect</code> as root will start your browser as root. This
may put you in a situation where:</p>
<ul>
<li>Your VPN requires root permissions.</li>
<li>Your browser refuses to start with root permissions, for security reasons.</li>
</ul>
<p>Luckily, you can configure the browser that <code>openconnect</code> starts via the
<code>--external-browser</code> flag. So your final command will look something like this:</p>






<div class="highlight"><pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">1</span><span>sudo -E /usr/bin/openconnect  --useragent<span style="color:#89dceb;font-weight:bold">=</span>AnyConnect <span style="color:#89b4fa">\
</span></span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">2</span><span><span style="color:#89b4fa"></span>  --external-browser<span style="color:#89dceb;font-weight:bold">=</span><span style="color:#a6e3a1">&#34;</span><span style="color:#f5e0dc">$HOME</span><span style="color:#a6e3a1">/bin/browser-derooting-wrapper-script&#34;</span> <span style="color:#89b4fa">\
</span></span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">3</span><span><span style="color:#89b4fa"></span>  access.yale.edu</span></span></code></pre></div>
<p>If you use Chromium, you can set the <code>browser-derooting-wrapper-script</code> to:</p>






<div class="highlight"><pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">1</span><span><span style="color:#6c7086;font-style:italic">#!/bin/sh -e
</span></span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">2</span><span><span style="color:#6c7086;font-style:italic"></span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">3</span><span><span style="color:#6c7086;font-style:italic"># Chromium will run as root if the `--no-sandbox` flag is passed. </span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">4</span><span><span style="color:#6c7086;font-style:italic"># This is horrendously insecure. So please only use this for the VPN auth</span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">5</span><span><span style="color:#6c7086;font-style:italic"># window. </span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">6</span><span><span style="color:#89dceb">exec</span> chromium --no-sandbox <span style="color:#a6e3a1">&#34;</span><span style="color:#f5e0dc">$@</span><span style="color:#a6e3a1">&#34;</span></span></span></code></pre></div>
<p>But it&rsquo;s better to set it to something like this:</p>






<div class="highlight"><pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">1</span><span><span style="color:#6c7086;font-style:italic">#!/bin/sh -e
</span></span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">2</span><span><span style="color:#6c7086;font-style:italic"></span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">3</span><span><span style="color:#6c7086;font-style:italic"># Use `su` to start Firefox as our regular, non-root user. </span>
</span></span><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">4</span><span><span style="color:#89dceb">exec</span> su --preserve-environment <span style="color:#f5e0dc">$YOUR_USERNAME</span> firefox <span style="color:#a6e3a1">&#34;</span><span style="color:#f5e0dc">$@</span><span style="color:#a6e3a1">&#34;</span></span></span></code></pre></div>
<p>If none of this works &ndash; you can try opening an existing browser window, <em>then</em>
trying the scripts above. <code>openconnect</code> should open a tab in the existing
window, which can sidestep the &ldquo;browser process is root&rdquo; issue.</p>
]]></content:encoded></item><item><title>CS 183EW: Engineering Ethics</title><link>https://yashlala.com/vault/class-notes/cs-183ew/</link><pubDate>Mon, 28 Feb 2022 19:14:45 -0800</pubDate><author>yash.lala@yale.edu (Yash Lala)</author><guid>https://yashlala.com/vault/class-notes/cs-183ew/</guid><description>&lt;p&gt;Taken Winter 2021, with Prof. Gershon Weltman.
Nicely typeset PDF available &lt;a href="notes.pdf"&gt;here&lt;/a&gt;.&lt;/p&gt;</description><content:encoded>&lt;p>Taken Winter 2021, with Prof. Gershon Weltman.
Nicely typeset PDF available &lt;a href="notes.pdf">here&lt;/a>.&lt;/p>
</content:encoded></item><item><title>CS 132: Compiler Construction</title><link>https://yashlala.com/vault/class-notes/cs-132/</link><pubDate>Fri, 28 Jan 2022 19:14:45 -0800</pubDate><author>yash.lala@yale.edu (Yash Lala)</author><guid>https://yashlala.com/vault/class-notes/cs-132/</guid><description>&lt;p&gt;Taken Fall 2021, with Prof. Jens Palsberg.
What a great class.
Nicely typeset PDF available &lt;a href="notes.pdf"&gt;here&lt;/a&gt;.&lt;/p&gt;</description><content:encoded>&lt;p>Taken Fall 2021, with Prof. Jens Palsberg.
What a great class.
Nicely typeset PDF available &lt;a href="notes.pdf">here&lt;/a>.&lt;/p>
</content:encoded></item><item><title>Evolution in the Deep Sea</title><link>https://yashlala.com/vault/binary-search-club/deep-sea-evolution/</link><pubDate>Sat, 15 Jan 2022 19:14:45 -0800</pubDate><author>yash.lala@yale.edu (Yash Lala)</author><guid>https://yashlala.com/vault/binary-search-club/deep-sea-evolution/</guid><description>&lt;p&gt;My first non-technical and non-historical topic! Today is meant as a change of
pace before we go on hiatus for the quarter; it&amp;rsquo;s information-light and full of
pretty pictures of ocean life.&lt;/p&gt;
&lt;p&gt;In this presentation, I talk about:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Oceanbed life in the past.
&lt;ul&gt;
&lt;li&gt;Why the Miller-Urey experiment is oversimplified.&lt;/li&gt;
&lt;li&gt;Three requirements for recurring lifelike chemical reactions, and why
undersea vents uniquely provide all three.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Oceanbed life today.
&lt;ul&gt;
&lt;li&gt;A runthrough of the ecosystem.&lt;/li&gt;
&lt;li&gt;Why deep sea life is large and scary: Kleiber&amp;rsquo;s rule, Bergman&amp;rsquo;s rule, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Future oceanbed life
&lt;ul&gt;
&lt;li&gt;How stable are these ecosystems under global-warming related changes?&lt;/li&gt;
&lt;li&gt;The impact of undersea mining.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Slides available &lt;a href="slides.pdf"&gt;here&lt;/a&gt;.&lt;/p&gt;</description><content:encoded><![CDATA[<p>My first non-technical and non-historical topic! Today is meant as a change of
pace before we go on hiatus for the quarter; it&rsquo;s information-light and full of
pretty pictures of ocean life.</p>
<p>In this presentation, I talk about:</p>
<ol>
<li>Oceanbed life in the past.
<ul>
<li>Why the Miller-Urey experiment is oversimplified.</li>
<li>Three requirements for recurring lifelike chemical reactions, and why
undersea vents uniquely provide all three.</li>
</ul>
</li>
<li>Oceanbed life today.
<ul>
<li>A runthrough of the ecosystem.</li>
<li>Why deep sea life is large and scary: Kleiber&rsquo;s rule, Bergman&rsquo;s rule, etc.</li>
</ul>
</li>
<li>Future oceanbed life
<ul>
<li>How stable are these ecosystems under global-warming related changes?</li>
<li>The impact of undersea mining.</li>
</ul>
</li>
</ol>
<p>Slides available <a href="slides.pdf">here</a>.</p>
]]></content:encoded></item><item><title>Real Git</title><link>https://yashlala.com/vault/binary-search-club/real-git/</link><pubDate>Fri, 31 Dec 2021 19:14:45 -0800</pubDate><author>yash.lala@yale.edu (Yash Lala)</author><guid>https://yashlala.com/vault/binary-search-club/real-git/</guid><description>&lt;p&gt;This presentation is an intermediate-level guide to Git. It also serves as a
primer to good version control conventions. If you&amp;rsquo;ve found yourself wondering
why you have spurious &amp;ldquo;merged branch X into X&amp;rdquo; commits after a &lt;code&gt;git pull&lt;/code&gt;, this
presentation is for you.&lt;/p&gt;
&lt;p&gt;Git&amp;rsquo;s CLI UI is phenomenally unintuitive (eg: &lt;code&gt;git tag&lt;/code&gt; vs &lt;code&gt;git remote -v&lt;/code&gt; vs
&lt;code&gt;git branch -a&lt;/code&gt;). Git&amp;rsquo;s default configuration is almost as bad.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Don&amp;rsquo;t worry!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This presentation tries to build intuitions in a way that separates the
&lt;em&gt;beautiful idea&lt;/em&gt; from the &lt;em&gt;inconsistent implementation&lt;/em&gt;.
Once we see behind the smoke and mirrors, we&amp;rsquo;ll be able to set up git aliases
that make more sense to us. You&amp;rsquo;ll never have to remember the difference
between &lt;code&gt;--staged&lt;/code&gt; and &lt;code&gt;--cached&lt;/code&gt; again.&lt;/p&gt;</description><content:encoded><![CDATA[<p>This presentation is an intermediate-level guide to Git. It also serves as a
primer to good version control conventions. If you&rsquo;ve found yourself wondering
why you have spurious &ldquo;merged branch X into X&rdquo; commits after a <code>git pull</code>, this
presentation is for you.</p>
<p>Git&rsquo;s CLI UI is phenomenally unintuitive (eg: <code>git tag</code> vs <code>git remote -v</code> vs
<code>git branch -a</code>). Git&rsquo;s default configuration is almost as bad.</p>
<p><strong>Don&rsquo;t worry!</strong></p>
<p>This presentation tries to build intuitions in a way that separates the
<em>beautiful idea</em> from the <em>inconsistent implementation</em>.
Once we see behind the smoke and mirrors, we&rsquo;ll be able to set up git aliases
that make more sense to us. You&rsquo;ll never have to remember the difference
between <code>--staged</code> and <code>--cached</code> again.</p>
<p>Slides available <a href="slides.pdf">here</a>.</p>
]]></content:encoded></item><item><title>CS M151B: Computer Architecture</title><link>https://yashlala.com/vault/class-notes/cs-m151b/</link><pubDate>Tue, 28 Dec 2021 19:14:45 -0800</pubDate><author>yash.lala@yale.edu (Yash Lala)</author><guid>https://yashlala.com/vault/class-notes/cs-m151b/</guid><description>&lt;p&gt;Taken Winter 2021, with Prof. Glenn Reinman.
Great class.
Nicely typeset PDF available &lt;a href="notes.pdf"&gt;here&lt;/a&gt;.&lt;/p&gt;</description><content:encoded>&lt;p>Taken Winter 2021, with Prof. Glenn Reinman.
Great class.
Nicely typeset PDF available &lt;a href="notes.pdf">here&lt;/a>.&lt;/p>
</content:encoded></item><item><title>The Two Webs</title><link>https://yashlala.com/vault/binary-search-club/two-webs/</link><pubDate>Fri, 17 Dec 2021 19:14:45 -0800</pubDate><author>yash.lala@yale.edu (Yash Lala)</author><guid>https://yashlala.com/vault/binary-search-club/two-webs/</guid><description>&lt;p&gt;In this presentation, I talk about a shift in the nature of the World Wide
Web&amp;rsquo;s content delivery systems &amp;ndash; a shift from &amp;ldquo;automatically downloading
documents via standard formats&amp;rdquo; to &amp;ldquo;portably running applications&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Among other things, I explain:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How technical issues started this shift.&lt;/li&gt;
&lt;li&gt;How economic issues accelerated this shift, often to the detriment of the
user experience. Eg: web advertising provides disincentives against
robust protocols for web accessibility.&lt;/li&gt;
&lt;li&gt;The US legal system&amp;rsquo;s perspective &amp;ndash; ft. the legality of AdBlock.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Slides available &lt;a href="slides.pdf"&gt;here&lt;/a&gt;.&lt;/p&gt;</description><content:encoded><![CDATA[<p>In this presentation, I talk about a shift in the nature of the World Wide
Web&rsquo;s content delivery systems &ndash; a shift from &ldquo;automatically downloading
documents via standard formats&rdquo; to &ldquo;portably running applications&rdquo;.</p>
<p>Among other things, I explain:</p>
<ul>
<li>How technical issues started this shift.</li>
<li>How economic issues accelerated this shift, often to the detriment of the
user experience. Eg: web advertising provides disincentives against
robust protocols for web accessibility.</li>
<li>The US legal system&rsquo;s perspective &ndash; ft. the legality of AdBlock.</li>
</ul>
<p>Slides available <a href="slides.pdf">here</a>.</p>
]]></content:encoded></item><item><title>CS 131: Programming Languages</title><link>https://yashlala.com/vault/class-notes/cs-131/</link><pubDate>Sat, 13 Nov 2021 19:14:45 -0800</pubDate><author>yash.lala@yale.edu (Yash Lala)</author><guid>https://yashlala.com/vault/class-notes/cs-131/</guid><description>&lt;p&gt;Taken Winter 2020, with Prof. Paul Eggert.
Nicely typeset PDF available &lt;a href="notes.pdf"&gt;here&lt;/a&gt;.&lt;/p&gt;</description><content:encoded>&lt;p>Taken Winter 2020, with Prof. Paul Eggert.
Nicely typeset PDF available &lt;a href="notes.pdf">here&lt;/a>.&lt;/p>
</content:encoded></item><item><title>CS 143: Intro to Databases</title><link>https://yashlala.com/vault/class-notes/cs-143/</link><pubDate>Sat, 13 Nov 2021 19:14:45 -0800</pubDate><author>yash.lala@yale.edu (Yash Lala)</author><guid>https://yashlala.com/vault/class-notes/cs-143/</guid><description>&lt;p&gt;Taken Spring 2021, with Prof. John Cho.
PDF available &lt;a href="notes.pdf"&gt;here&lt;/a&gt;.&lt;/p&gt;</description><content:encoded>&lt;p>Taken Spring 2021, with Prof. John Cho.
PDF available &lt;a href="notes.pdf">here&lt;/a>.&lt;/p>
</content:encoded></item><item><title>Spanner: Google vs the CAP Theorem</title><link>https://yashlala.com/vault/binary-search-club/spanner/</link><pubDate>Sun, 17 Oct 2021 19:14:45 -0800</pubDate><author>yash.lala@yale.edu (Yash Lala)</author><guid>https://yashlala.com/vault/binary-search-club/spanner/</guid><description>&lt;p&gt;In this presentation, I explain how Google&amp;rsquo;s
&lt;a href="https://static.googleusercontent.com/media/research.google.com/en//archive/spanner-osdi2012.pdf"&gt;Spanner&lt;/a&gt;
system is implemented &amp;ndash; and how it&amp;rsquo;s performance seemingly defies the
&lt;a href="https://en.wikipedia.org/wiki/CAP_theorem"&gt;CAP theorem&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve tried to keep this presentation accessible to people without a deep
systems background, but do let me know if you weren&amp;rsquo;t at my
&lt;a href="https://yashlala.com/binary-search-club/defining-time"&gt;prior presentation&lt;/a&gt; about distributed
systems. I promise I&amp;rsquo;ll keep an eye on you throughout today&amp;rsquo;s presentation.&lt;/p&gt;
&lt;p&gt;In this presentation, I:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Introduce the CAP theorem using a hypothetical groupchat as an example.&lt;/li&gt;
&lt;li&gt;Discuss strict and loose consistency models.&lt;/li&gt;
&lt;li&gt;Explain how Spanner provides consistency without angering the CAP theorem.
&lt;ul&gt;
&lt;li&gt;Explain the underlying theory (clock drift error bounds =&amp;gt; &amp;ldquo;wait out the
uncertainty&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;Talk about the expensive hardware that makes this feasible (atomic clocks
everywhere!).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Conclusion: with enough money and hardware, you can create large-scale,
strongly-consistent, systems &amp;ndash; even when the theoreticians say otherwise.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Slides available &lt;a href="slides.pdf"&gt;here&lt;/a&gt;.&lt;/p&gt;</description><content:encoded><![CDATA[<p>In this presentation, I explain how Google&rsquo;s
<a href="https://static.googleusercontent.com/media/research.google.com/en//archive/spanner-osdi2012.pdf">Spanner</a>
system is implemented &ndash; and how it&rsquo;s performance seemingly defies the
<a href="https://en.wikipedia.org/wiki/CAP_theorem">CAP theorem</a>.</p>
<p>I&rsquo;ve tried to keep this presentation accessible to people without a deep
systems background, but do let me know if you weren&rsquo;t at my
<a href="/binary-search-club/defining-time">prior presentation</a> about distributed
systems. I promise I&rsquo;ll keep an eye on you throughout today&rsquo;s presentation.</p>
<p>In this presentation, I:</p>
<ul>
<li>Introduce the CAP theorem using a hypothetical groupchat as an example.</li>
<li>Discuss strict and loose consistency models.</li>
<li>Explain how Spanner provides consistency without angering the CAP theorem.
<ul>
<li>Explain the underlying theory (clock drift error bounds =&gt; &ldquo;wait out the
uncertainty&rdquo;)</li>
<li>Talk about the expensive hardware that makes this feasible (atomic clocks
everywhere!).</li>
</ul>
</li>
<li>Conclusion: with enough money and hardware, you can create large-scale,
strongly-consistent, systems &ndash; even when the theoreticians say otherwise.</li>
</ul>
<p>Slides available <a href="slides.pdf">here</a>.</p>
]]></content:encoded></item><item><title>Computer Terminal Protocols</title><link>https://yashlala.com/vault/binary-search-club/terminal-protocols/</link><pubDate>Sun, 03 Oct 2021 19:14:45 -0800</pubDate><author>yash.lala@yale.edu (Yash Lala)</author><guid>https://yashlala.com/vault/binary-search-club/terminal-protocols/</guid><description>&lt;p&gt;Why do terminal emulators still mess up their output when you resize the
window? In this presentation, I walk through the history of UNIX terminals.
I discuss:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Antique methods of electrical communication, from Morse code to the famous
&lt;a href="https://en.wikipedia.org/wiki/Party_line_(telephony)#Barbed_wire_telephone_lines"&gt;barbed wire telephone network&lt;/a&gt;
used by American farmers.&lt;/li&gt;
&lt;li&gt;A historical example of the difficulties of synchronous communication
protocols.&lt;/li&gt;
&lt;li&gt;The use of punch cards as both a means of &lt;em&gt;I/O logging&lt;/em&gt; (stock tickers) and
as a means of &lt;em&gt;programming&lt;/em&gt; (Jaquard looms =&amp;gt; IBM 1401).&lt;/li&gt;
&lt;li&gt;The historical basis for a separate kernel TTY layer, and the ugly
consequences.&lt;/li&gt;
&lt;li&gt;Finally: how communication asynchrony, punch cards, and the TTY system
architecture cause the problems we know and love today.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Slides available &lt;a href="slides.pdf"&gt;here&lt;/a&gt;.&lt;/p&gt;</description><content:encoded><![CDATA[<p>Why do terminal emulators still mess up their output when you resize the
window? In this presentation, I walk through the history of UNIX terminals.
I discuss:</p>
<ul>
<li>Antique methods of electrical communication, from Morse code to the famous
<a href="https://en.wikipedia.org/wiki/Party_line_(telephony)#Barbed_wire_telephone_lines">barbed wire telephone network</a>
used by American farmers.</li>
<li>A historical example of the difficulties of synchronous communication
protocols.</li>
<li>The use of punch cards as both a means of <em>I/O logging</em> (stock tickers) and
as a means of <em>programming</em> (Jaquard looms =&gt; IBM 1401).</li>
<li>The historical basis for a separate kernel TTY layer, and the ugly
consequences.</li>
<li>Finally: how communication asynchrony, punch cards, and the TTY system
architecture cause the problems we know and love today.</li>
</ul>
<p>Slides available <a href="slides.pdf">here</a>.</p>
]]></content:encoded></item><item><title>Defining Time in Distributed Systems</title><link>https://yashlala.com/vault/binary-search-club/defining-time/</link><pubDate>Sat, 15 May 2021 19:14:45 -0800</pubDate><author>yash.lala@yale.edu (Yash Lala)</author><guid>https://yashlala.com/vault/binary-search-club/defining-time/</guid><description>&lt;p&gt;In this presentation, I talk about:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Race conditions in single-machine programming
(&lt;a href="https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use"&gt;TOCTOU&lt;/a&gt;, etc).&lt;/li&gt;
&lt;li&gt;How solving these race conditions necessitates atomic primitives.&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Race conditions&amp;rdquo; in distributed systems (oh no! no more atomics!).&lt;/li&gt;
&lt;li&gt;The benefits of lax consistency models for distributed systems.&lt;/li&gt;
&lt;li&gt;A walkthrough of Lamport clocks.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Slides available &lt;a href="slides.pdf"&gt;here&lt;/a&gt;.&lt;/p&gt;</description><content:encoded><![CDATA[<p>In this presentation, I talk about:</p>
<ul>
<li>Race conditions in single-machine programming
(<a href="https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use">TOCTOU</a>, etc).</li>
<li>How solving these race conditions necessitates atomic primitives.</li>
<li>&ldquo;Race conditions&rdquo; in distributed systems (oh no! no more atomics!).</li>
<li>The benefits of lax consistency models for distributed systems.</li>
<li>A walkthrough of Lamport clocks.</li>
</ul>
<p>Slides available <a href="slides.pdf">here</a>.</p>
]]></content:encoded></item><item><title>Containers</title><link>https://yashlala.com/vault/binary-search-club/containers/</link><pubDate>Sat, 10 Apr 2021 19:14:45 -0800</pubDate><author>yash.lala@yale.edu (Yash Lala)</author><guid>https://yashlala.com/vault/binary-search-club/containers/</guid><description>&lt;p&gt;What&amp;rsquo;s the difference between a containers and a virtual machine?
How is a hypervisor/kernel actually implemented?
Do these abstractions add runtime overhead? If so, how much, and &lt;em&gt;where&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;This presentation attempts to provide clear, &lt;em&gt;evidence based&lt;/em&gt;, answers to the
above questions. In this presentation, I:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Discuss the implementations of virtual machines and containers.&lt;/li&gt;
&lt;li&gt;Trace the history behind VMs and containers. I argue that the historical
prevalence of VMs was largely due to a failure of contemporary OS isolation
mechanisms, and that this trend will reverse.&lt;/li&gt;
&lt;li&gt;Dispel common misconceptions about each technology.&lt;/li&gt;
&lt;li&gt;Create a Docker clone in C using Linux namespaces.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &amp;ldquo;live&amp;rdquo; portion of this presentation consisted of a live demo of various
Linux namespaces on my laptop, and was mostly lifted from
&lt;a href="https://youtu.be/8fi7uSYlOdc"&gt;&amp;ldquo;Containers from Scratch&amp;rdquo;&lt;/a&gt;, a presentation
delivered at GOTO Amsterdam 2018 by
&lt;a href="https://www.lizrice.com/"&gt;Liz Rice&lt;/a&gt;.
I&amp;rsquo;d highly recommend checking out the original talk, which is masterfully done
(particularly the live code demo).&lt;/p&gt;</description><content:encoded><![CDATA[<p>What&rsquo;s the difference between a containers and a virtual machine?
How is a hypervisor/kernel actually implemented?
Do these abstractions add runtime overhead? If so, how much, and <em>where</em>?</p>
<p>This presentation attempts to provide clear, <em>evidence based</em>, answers to the
above questions. In this presentation, I:</p>
<ul>
<li>Discuss the implementations of virtual machines and containers.</li>
<li>Trace the history behind VMs and containers. I argue that the historical
prevalence of VMs was largely due to a failure of contemporary OS isolation
mechanisms, and that this trend will reverse.</li>
<li>Dispel common misconceptions about each technology.</li>
<li>Create a Docker clone in C using Linux namespaces.</li>
</ul>
<p>The &ldquo;live&rdquo; portion of this presentation consisted of a live demo of various
Linux namespaces on my laptop, and was mostly lifted from
<a href="https://youtu.be/8fi7uSYlOdc">&ldquo;Containers from Scratch&rdquo;</a>, a presentation
delivered at GOTO Amsterdam 2018 by
<a href="https://www.lizrice.com/">Liz Rice</a>.
I&rsquo;d highly recommend checking out the original talk, which is masterfully done
(particularly the live code demo).</p>
<p>Slides available <a href="slides.pdf">here</a>.</p>
]]></content:encoded></item><item><title>Ling 1: Intro to Linguistics</title><link>https://yashlala.com/vault/class-notes/ling-1/</link><pubDate>Sun, 28 Mar 2021 19:14:45 -0800</pubDate><author>yash.lala@yale.edu (Yash Lala)</author><guid>https://yashlala.com/vault/class-notes/ling-1/</guid><description>&lt;p&gt;Taken Winter 2021. Fully asynchronous class. PDF available &lt;a href="notes.pdf"&gt;here&lt;/a&gt;.&lt;/p&gt;</description><content:encoded>&lt;p>Taken Winter 2021. Fully asynchronous class. PDF available &lt;a href="notes.pdf">here&lt;/a>.&lt;/p>
</content:encoded></item><item><title>CS 111: Operating Systems</title><link>https://yashlala.com/vault/class-notes/cs-111/</link><pubDate>Sat, 28 Dec 2019 19:14:45 -0800</pubDate><author>yash.lala@yale.edu (Yash Lala)</author><guid>https://yashlala.com/vault/class-notes/cs-111/</guid><description>&lt;p&gt;Taken Fall 2019, with Prof. Paul Eggert.
Nicely typeset PDF available &lt;a href="notes.pdf"&gt;here&lt;/a&gt;.&lt;/p&gt;</description><content:encoded>&lt;p>Taken Fall 2019, with Prof. Paul Eggert.
Nicely typeset PDF available &lt;a href="notes.pdf">here&lt;/a>.&lt;/p>
</content:encoded></item><item><title>Hist 3A: History of Science</title><link>https://yashlala.com/vault/class-notes/hist-3a/</link><pubDate>Sat, 28 Dec 2019 19:14:45 -0800</pubDate><author>yash.lala@yale.edu (Yash Lala)</author><guid>https://yashlala.com/vault/class-notes/hist-3a/</guid><description>&lt;p&gt;Taken Fall 2019, with Prof. Amir Alexander.
Nicely typeset PDF available &lt;a href="notes.pdf"&gt;here&lt;/a&gt;&lt;/p&gt;</description><content:encoded>&lt;p>Taken Fall 2019, with Prof. Amir Alexander.
Nicely typeset PDF available &lt;a href="notes.pdf">here&lt;/a>&lt;/p>
</content:encoded></item></channel></rss>